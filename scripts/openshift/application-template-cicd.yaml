apiVersion: v1
kind: Template
labels:
  template: app-template-dotnet-core-cicd
message: |-
  CI\CD part of the deployment.
metadata:
  annotations:
    description: |-
      This example showcases several concepts: Jenkins Pipeline(s),
      .Net Core microservices and corresponding OpenShift infrastructure to run CI\CD.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: dotnet-core
parameters:
- description: Name prefix for various objects.
  displayName: Name Prefix
  name: NAMEPFX
  required: true
  value: dotnet-core
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAMEPFX}-web-dc", "namespace": "${NAMEPFX}-dev", "kind": "DeploymentConfig"}]'
    labels:
      name: ${NAMEPFX}-web-DEV
      app: ${NAMEPFX}
    name: ${NAMEPFX}-web-DEV
  spec:
    source:
      git:
        ref: master
        uri: https://github.com/andriy-gnennyy-gl/openshift-poc-01.git
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: src/web/Jenkinsfile
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAMEPFX}-web-dc", "namespace": "${NAMEPFX}-prod", "kind": "DeploymentConfig"}]'
    labels:
      name: ${NAMEPFX}-web-PROD
      app: ${NAMEPFX}
    name: ${NAMEPFX}-web-PROD
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
        try {
          def project=""
          node {
            project = env.PROJECT_NAME
            stage("Promote") {
              milestone()
              openshiftTag(namespace: "${NAMEPFX}-dev", sourceStream: "${NAMEPFX}-web-img", sourceTag: 'latest', destinationNamespace: "${NAMEPFX}-dev", destinationStream: "${NAMEPFX}-web-img", destinationTag: 'latest')
            }
          }
        } catch (err) {
           echo "Caught: ${err}"
           currentBuild.result = 'FAILURE'
           throw err
        }
      type: JenkinsPipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the Web application
    name: ${NAMEPFX}-web-bc
    labels:
      app: ${NAMEPFX}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAMEPFX}-web-img:latest
        namespace: ${NAMEPFX}-dev
    postCommit:
      script: npm test
    source:
      contextDir: src/web
      git:
        ref: master
        uri: https://github.com/andriy-gnennyy-gl/openshift-poc-01.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: DockerImage
          name: registry.access.redhat.com/dotnet/dotnet-20-rhel7:2.0 
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic