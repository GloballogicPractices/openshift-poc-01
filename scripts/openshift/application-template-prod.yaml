apiVersion: v1
kind: Template
labels:
  template: app-template-dotnet-core-prod
message: |-
  Includes Prod instance of the services and corresponding deployment configs.
metadata:
  annotations:
    description: |-
      This example showcases several concepts: Jenkins Pipeline(s),
      .Net Core microservices and corresponding OpenShift infrastructure to run CI\CD.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: dotnet-core-prod
#------------------------------------------------------------------------------
parameters:
- description: Name prefix for various objects.
  displayName: Name Prefix
  name: NAMEPFX
  required: true
  value: dotnet-core
- description: The hostname that will route to the ASP .Net Core website,
    if left blank a value will be defaulted.
  displayName: ASP .Net Core Application Hostname
  name: APPLICATION_DOMAIN
- description: Maximum amount of memory the ASP .Net Core container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
#------------------------------------------------------------------------------
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the Web application image
    name: ${NAMEPFX}-web-img
    labels:
      app: ${NAMEPFX}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the Weather service image
    name: ${NAMEPFX}-weather-img
    labels:
      app: ${NAMEPFX}
#------------------------------------------------------------------------------
- apiVersion: v1
  kind: Service
  metadata:
#    annotations:
#      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
    name: ${NAMEPFX}-web-svc
    labels:
      app: ${NAMEPFX}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAMEPFX}-web
- apiVersion: v1
  kind: Service
  metadata:
#    annotations:
#      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
    name: ${NAMEPFX}-weather-svc
    labels:
      app: ${NAMEPFX}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAMEPFX}-weather
#------------------------------------------------------------------------------
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAMEPFX}-web-rt
    labels:
      app: ${NAMEPFX}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAMEPFX}-web-svc
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAMEPFX}-weather-rt
    labels:
      app: ${NAMEPFX}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAMEPFX}-weather-svc
#------------------------------------------------------------------------------
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the Web application
    name: ${NAMEPFX}-web-dc
    labels:
      app: ${NAMEPFX}
  spec:
    replicas: 1
    selector:
      name: ${NAMEPFX}-web
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAMEPFX}-web
          app: ${NAMEPFX}
        name: ${NAMEPFX}-web
      spec:
        containers:
        - env:
          - name: WEATHER_SERVICE_ENDPOINT
            value: 'http://dotnet-core-weather-rt-dotnet-core-prod.52.236.37.25.nip.io/api/SampleData/WeatherForecasts'
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: ${NAMEPFX}-web
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAMEPFX}-web
        from:
          kind: ImageStreamTag
          name: ${NAMEPFX}-web-img:latest
          namespace: ${NAMEPFX}-prod
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the Weather service
    name: ${NAMEPFX}-weather-dc
    labels:
      app: ${NAMEPFX}
  spec:
    replicas: 1
    selector:
      name: ${NAMEPFX}-weather
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAMEPFX}-weather
          app: ${NAMEPFX}
        name: ${NAMEPFX}-weather
      spec:
        containers:
        - env:
          - name: FAKE
            value: ' '
          image: ' '
          livenessProbe:
            httpGet:
              path: /api/ping
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: ${NAMEPFX}-weather
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /api/ping
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAMEPFX}-weather
        from:
          kind: ImageStreamTag
          name: ${NAMEPFX}-weather-img:latest
          namespace: ${NAMEPFX}-prod
      type: ImageChange
    - type: ConfigChange