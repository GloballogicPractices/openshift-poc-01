properties(
    [
        [
            $class: 'BuildDiscarderProperty',
            strategy: [$class: 'LogRotator', numToKeepStr: '10']
        ],
        //pipelineTriggers([cron('H/5 * * * *')]),
    ]
)

def changesOnPath(pattern){
//	def check = ~'${pattern}'
	def changeLogSets = currentBuild.changeSets
	for (int i = 0; i < changeLogSets.size(); i++) {
		def entries = changeLogSets[i].items
		for (int j = 0; j < entries.length; j++) {
			def entry = entries[j]
			echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
			def files = new ArrayList(entry.affectedFiles)
			for (int k = 0; k < files.size(); k++) {
				def file = files[k]
				echo "  ${file.editType.name} ${file.path}"
				if (file.path ==~ pattern) {
					return true
				}
			}
		}
	}
	return false
}


try{
    node {
		if (!changesOnPath('src/web/*')){
			currentBuild.result = 'SUCCESS'
			return
		}

        stage('build'){
             openshiftBuild(buildConfig: 'dotnet-core-app-web-bc', showBuildLogs: 'true')			 
        }

        stage('deploy') {
            openshiftDeploy(deploymentConfig: 'dotnet-core-app-web-dc')
        }
    }
} catch (Exception e) {
    throw e;
}